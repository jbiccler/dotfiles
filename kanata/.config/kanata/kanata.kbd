
(defcfg
  #|
  This configuration will process all keys pressed inside of kanata, even if
  they are not mapped in defsrc. This is so that certain actions can activate
  at the right time for certain input sequences. By default, unmapped keys are
  not processed through kanata due to a Windows issue related to AltGr. If you
  use AltGr in your keyboard, you will likely want to follow the simple.kbd
  file while unmapping lctl and ralt from defsrc.
  |#
  process-unmapped-keys yes
  concurrent-tap-hold yes
)

;; Only one defsrc is allowed.
;;
;; defsrc defines the keys that will be intercepted by kanata. The order of the
;; keys matches with deflayer declarations and all deflayer declarations must
;; have the same number of keys as defsrc. Any keys not listed in defsrc will
;; be passed straight to the operating system.
(defsrc
  tab
  caps h j k l
  lctl lalt
)

;; The first layer defined is the layer that will be active by default.
(deflayer default
  @tab
  @caps h j k l
  lctl lalt
)

;; Define variable names
(defvar
      ;; tap-time
      tt 150
      ;; hold-time
      ht 150
)

;; defalias is used to declare a shortcut for a more complicated action to keep
;; the deflayer declarations clean and aligned. The alignment in deflayers is not
;; necessary, but is strongly recommended for ease of understanding visually.
;;
;; Aliases are referred to by `@<alias_name>`.
(defalias
  ;; tap-hold-press: Activate $hold-action early if held and another input key is pressed.

  ;; tap for esc, hold for lctrl
  caps (tap-hold-press $tt $ht esc lctl)
  ;; tap for tab, hold for layer shift
  tab (tap-hold-press $tt $ht tab (layer-while-held nav))
  capsword (caps-word 2000)
)

;; underscore _ which means "transparent". Transparent means the base layer
;; behaviour is used when pressing that key.
(deflayer nav
  _ 
  _ left down up right
  _ _
)

(defchordsv2
  (lalt caps) @capsword 400 all-released ()
  (lctl caps) caps 400 all-released ()
)
